/*
order service

order service

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package doc

import (
	"encoding/json"
)

// checks if the ItemWithQuantity type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ItemWithQuantity{}

// ItemWithQuantity struct for ItemWithQuantity
type ItemWithQuantity struct {
	Id *string `json:"id,omitempty"`
	Quantity *int32 `json:"quantity,omitempty"`
}

// NewItemWithQuantity instantiates a new ItemWithQuantity object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewItemWithQuantity() *ItemWithQuantity {
	this := ItemWithQuantity{}
	return &this
}

// NewItemWithQuantityWithDefaults instantiates a new ItemWithQuantity object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewItemWithQuantityWithDefaults() *ItemWithQuantity {
	this := ItemWithQuantity{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ItemWithQuantity) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemWithQuantity) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ItemWithQuantity) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ItemWithQuantity) SetId(v string) {
	o.Id = &v
}

// GetQuantity returns the Quantity field value if set, zero value otherwise.
func (o *ItemWithQuantity) GetQuantity() int32 {
	if o == nil || IsNil(o.Quantity) {
		var ret int32
		return ret
	}
	return *o.Quantity
}

// GetQuantityOk returns a tuple with the Quantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemWithQuantity) GetQuantityOk() (*int32, bool) {
	if o == nil || IsNil(o.Quantity) {
		return nil, false
	}
	return o.Quantity, true
}

// HasQuantity returns a boolean if a field has been set.
func (o *ItemWithQuantity) HasQuantity() bool {
	if o != nil && !IsNil(o.Quantity) {
		return true
	}

	return false
}

// SetQuantity gets a reference to the given int32 and assigns it to the Quantity field.
func (o *ItemWithQuantity) SetQuantity(v int32) {
	o.Quantity = &v
}

func (o ItemWithQuantity) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ItemWithQuantity) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Quantity) {
		toSerialize["quantity"] = o.Quantity
	}
	return toSerialize, nil
}

type NullableItemWithQuantity struct {
	value *ItemWithQuantity
	isSet bool
}

func (v NullableItemWithQuantity) Get() *ItemWithQuantity {
	return v.value
}

func (v *NullableItemWithQuantity) Set(val *ItemWithQuantity) {
	v.value = val
	v.isSet = true
}

func (v NullableItemWithQuantity) IsSet() bool {
	return v.isSet
}

func (v *NullableItemWithQuantity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableItemWithQuantity(val *ItemWithQuantity) *NullableItemWithQuantity {
	return &NullableItemWithQuantity{value: val, isSet: true}
}

func (v NullableItemWithQuantity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableItemWithQuantity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


