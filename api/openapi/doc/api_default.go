/*
order service

order service

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package doc

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// DefaultAPIService DefaultAPI service
type DefaultAPIService service

type ApiCustomerCustomerIDOrdersOrderIDGetRequest struct {
	ctx context.Context
	ApiService *DefaultAPIService
	customerID string
	orderID string
}

func (r ApiCustomerCustomerIDOrdersOrderIDGetRequest) Execute() (*Order, *http.Response, error) {
	return r.ApiService.CustomerCustomerIDOrdersOrderIDGetExecute(r)
}

/*
CustomerCustomerIDOrdersOrderIDGet Method for CustomerCustomerIDOrdersOrderIDGet

get order

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param customerID
 @param orderID
 @return ApiCustomerCustomerIDOrdersOrderIDGetRequest
*/
func (a *DefaultAPIService) CustomerCustomerIDOrdersOrderIDGet(ctx context.Context, customerID string, orderID string) ApiCustomerCustomerIDOrdersOrderIDGetRequest {
	return ApiCustomerCustomerIDOrdersOrderIDGetRequest{
		ApiService: a,
		ctx: ctx,
		customerID: customerID,
		orderID: orderID,
	}
}

// Execute executes the request
//  @return Order
func (a *DefaultAPIService) CustomerCustomerIDOrdersOrderIDGetExecute(r ApiCustomerCustomerIDOrdersOrderIDGetRequest) (*Order, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Order
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultAPIService.CustomerCustomerIDOrdersOrderIDGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/customer/{customerID}/orders/{orderID}"
	localVarPath = strings.Replace(localVarPath, "{"+"customerID"+"}", url.PathEscape(parameterValueToString(r.customerID, "customerID")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"orderID"+"}", url.PathEscape(parameterValueToString(r.orderID, "orderID")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCustomerCustomerIDOrdersPostRequest struct {
	ctx context.Context
	ApiService *DefaultAPIService
	customerID string
	createOrderRequest *CreateOrderRequest
}

func (r ApiCustomerCustomerIDOrdersPostRequest) CreateOrderRequest(createOrderRequest CreateOrderRequest) ApiCustomerCustomerIDOrdersPostRequest {
	r.createOrderRequest = &createOrderRequest
	return r
}

func (r ApiCustomerCustomerIDOrdersPostRequest) Execute() (*Order, *http.Response, error) {
	return r.ApiService.CustomerCustomerIDOrdersPostExecute(r)
}

/*
CustomerCustomerIDOrdersPost Method for CustomerCustomerIDOrdersPost

create order

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param customerID
 @return ApiCustomerCustomerIDOrdersPostRequest
*/
func (a *DefaultAPIService) CustomerCustomerIDOrdersPost(ctx context.Context, customerID string) ApiCustomerCustomerIDOrdersPostRequest {
	return ApiCustomerCustomerIDOrdersPostRequest{
		ApiService: a,
		ctx: ctx,
		customerID: customerID,
	}
}

// Execute executes the request
//  @return Order
func (a *DefaultAPIService) CustomerCustomerIDOrdersPostExecute(r ApiCustomerCustomerIDOrdersPostRequest) (*Order, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Order
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultAPIService.CustomerCustomerIDOrdersPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/customer/{customerID}/orders"
	localVarPath = strings.Replace(localVarPath, "{"+"customerID"+"}", url.PathEscape(parameterValueToString(r.customerID, "customerID")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.createOrderRequest == nil {
		return localVarReturnValue, nil, reportError("createOrderRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.createOrderRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
